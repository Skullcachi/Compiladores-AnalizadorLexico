package Sintactic;

import java_cup.runtime.*;
import java.io.FileReader;

parser code {:

    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0)
                {
                    m.append(", column " + (s.right + 1));
                }
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info){
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0)
                {
                    m.append(", column " + (s.right + 1));
                }
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
:};

/* Declaracion de simbolos terminales y no terminales */
terminal        SUMA, RESTA, MULT, DIV, MOD, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, ASIGNAR, IGUAL, DIFERENTE, AND, OR, NOT, SEMI_COLON, COMA,PUNTO, COR_IZQ, COR_DER, PAR_IZQ, PAR_DER, LLAVE_IZQ, LLAVE_DER, CORCHETES, PARENTESIS, LLAVES;
terminal        VOID, INT, DOUBLE, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MALLOC;
terminal        TRUE, FALSE;
terminal        INTEGER, STRING, IDENT, GETBYTE, SETBYTE, INTCONSTANT, DOUBLECONSTANT, BOOLCONSTANT, STRINGCONSTANT;

non terminal    Object  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant;