
 Token: RESERVED WORD: class.

 Token: IDENTIFIER: Parser.

 Token: RESERVED WORD: extends.

 Token: IDENTIFIER: analyzer.

 Token: RESERVED WORD: implements.

 Token: IDENTIFIER: lexical.

 Token: ,.

 Token: IDENTIFIER: syntactical.

 Token: {.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: a1.

 Token: ;.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: f1.

 Token: (.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: a.

 Token: ,.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: b.

 Token: ,.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: c.

 Token: ).

 Token: {.

 Token: {.

 Token: RESERVED WORD: if.

 Token: (.

 Token: IDENTIFIER: a.

 Token: >.

 Token: IDENTIFIER: b.

 Token: ).

 Token: IDENTIFIER: p1.

 Token: =.

 Token: 2.

 Token: ;.

 Token: RESERVED WORD: else.

 Token: IDENTIFIER: p1.

 Token: =.

 Token: 3.

 Token: ;.

 Token: }.

 Token: RESERVED WORD: return.

 Token: (.

 Token: IDENTIFIER: p1.

 Token: ).

 Token: ;.

 Token: }.

 Token: RESERVED WORD: void.

 Token: IDENTIFIER: proc1.

 Token: (.

 Token: RESERVED WORD: double.

 Token: IDENTIFIER: y.

 Token: ).

 Token: {.

 Token: }.

 Token: }.

 Token: RESERVED WORD: class.

 Token: IDENTIFIER: Program.

 Token: {.

 Token: RESERVED WORD: void.

 Token: IDENTIFIER: main.

 Token: (.

 Token: ).

 Token: {.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: m1.

 Token: ;.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: m2.

 Token: ;.

 Token: RESERVED WORD: int.

 Token: IDENTIFIER: m3.

 Token: ;.

 Token: RESERVED WORD: bool.

 Token: IDENTIFIER: t.

 Token: ;.

 Token: IDENTIFIER: Parser.

 Token: IDENTIFIER: MyParser.

 Token: ;.

 Token: IDENTIFIER: m1.

 Token: =.

 Token: IDENTIFIER: MyParser.

 Token: ..

 Token: IDENTIFIER: f1.

 Token: (.

 Token: 1.

 Token: ,.

 Token: DOUBLE: 2.2.

 Token: ,.

 Token: "3".

 Token: ).

 Token: ;.

 Token: RESERVED WORD: while.

 Token: (.

 Token: IDENTIFIER: m1.

 Token: >.

 Token: 10.

 Token: ).

 Token: {.

 Token: RESERVED WORD: for.

 Token: (.

 Token: IDENTIFIER: m2.

 Token: =.

 Token: IDENTIFIER: f1.

 Token: (.

 Token: 1.

 Token: ,.

 Token: DOUBLE: 2.2.

 Token: ,.

 Token: "3".

 Token: ).

 Token: ;.

 Token: IDENTIFIER: m2.

 Token: =.

 Token: IDENTIFIER: m2.

 Token: +.

 Token: 1.

 Token: ;.

 Token: (.

 Token: 2.

 Token: ).

 Token: ).

 Token: RESERVED WORD: Print.

 Token: (.

 Token: IDENTIFIER: m1.

 Token: *.

 Token: 2.

 Token: ).

 Token: ;.

 Token: RESERVED WORD: if.

 Token: (.

 Token: !.

 Token: (.

 Token: IDENTIFIER: m1.

 Token: *.

 Token: 2.

 Token: <.

 Token: IDENTIFIER: m2.

 Token: ).

 Token: ).

 Token: {.

 Token: RESERVED WORD: break.

 Token: ;.

 Token: }.

 Token: }.

 Token: RESERVED WORD: if.

 Token: (.

 Token: IDENTIFIER: m2.

 Token: <=.

 Token: IDENTIFIER: m3.

 Token: ).

 Token: IDENTIFIER: m1.

 Token: =.

 Token: 1.

 Token: ;.

 Token: IDENTIFIER: t.

 Token: =.

 Token: (.

 Token: IDENTIFIER: a1.

 Token: <.

 Token: IDENTIFIER: y.

 Token: ||.

 Token: IDENTIFIER: a1.

 Token: <=.

 Token: IDENTIFIER: y.

 Token: ).

 Token: ;.

 Token: }.

 Token: }.
EOF