/* The following code was generated by JFlex 1.6.1 */

package Lexic;
import java.io.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cachi/Documents/Landivar/Compiladores/Compiladores-AnalizadorLexico/MiniC#/src/Lexic/Yylex.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\77\1\76\1\77\1\77\1\3\22\0\1\75\1\15\1\30"+
    "\2\0\1\11\1\16\1\0\1\24\1\25\1\2\1\7\1\20\1\10"+
    "\1\21\1\1\1\72\11\5\1\0\1\17\1\12\1\13\1\14\2\0"+
    "\1\46\1\71\2\74\1\40\1\45\1\70\4\6\1\47\5\6\1\36"+
    "\1\50\1\35\1\37\2\6\1\73\2\6\1\22\1\0\1\23\1\0"+
    "\1\6\1\0\1\42\1\56\1\60\1\54\1\34\1\41\1\57\1\61"+
    "\1\53\1\6\1\66\1\43\1\63\1\55\1\52\1\64\1\6\1\32"+
    "\1\44\1\31\1\33\1\51\1\65\1\62\1\67\1\6\1\26\1\4"+
    "\1\27\7\0\1\77\32\0\1\77\u15df\0\1\77\u097f\0\13\77\35\0"+
    "\1\77\1\77\5\0\1\77\57\0\1\77\u0fa0\0\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\22\6\1\5\1\27\1\30\1\0\1\31"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\0\14\6\1\43\14\6\1\0\1\30"+
    "\1\44\2\0\1\45\10\6\1\46\4\6\1\47\3\6"+
    "\1\50\7\6\1\51\1\0\1\52\1\32\1\0\1\53"+
    "\1\54\2\6\1\55\5\6\1\56\3\6\1\57\2\6"+
    "\1\60\5\6\1\0\4\6\1\61\6\6\1\62\1\63"+
    "\1\6\1\64\1\65\1\6\1\66\3\6\1\67\3\6"+
    "\1\70\1\6\1\71\3\6\1\72\1\73\3\6\1\74"+
    "\1\75\3\6\1\76\1\6\1\77\2\6\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u01c0\0\100\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\100\0\100\0\100\0\u0340\0\100\0\u0380\0\100\0\u03c0"+
    "\0\100\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\300\0\u0900\0\u0940"+
    "\0\100\0\u0980\0\u09c0\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0180\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\100\0\u1080"+
    "\0\u10c0\0\u1100\0\u0a00\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u0180\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1040\0\u1740\0\100\0\u1780"+
    "\0\u1780\0\u0180\0\u0180\0\u17c0\0\u1800\0\u0180\0\u1840\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u0180\0\u1980\0\u19c0\0\u1a00\0\u0180"+
    "\0\u1a40\0\u1a80\0\u0180\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u0180\0\u1d40\0\u1d80"+
    "\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u0180\0\u0180\0\u1ec0\0\u0180"+
    "\0\u0180\0\u1f00\0\u0180\0\u1f40\0\u1f80\0\u1fc0\0\u0180\0\u2000"+
    "\0\u2040\0\u2080\0\u0180\0\u20c0\0\u0180\0\u2100\0\u2140\0\u2180"+
    "\0\u0180\0\u0180\0\u21c0\0\u2200\0\u2240\0\u0180\0\u0180\0\u2280"+
    "\0\u22c0\0\u2300\0\u0180\0\u2340\0\u0180\0\u2380\0\u23c0\0\u0180"+
    "\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\10\1\35\1\36\3\10\1\37"+
    "\2\10\1\40\1\41\2\10\1\42\1\43\1\10\1\44"+
    "\1\45\1\46\1\47\1\10\1\50\2\10\1\51\1\52"+
    "\1\53\2\10\1\54\1\10\1\55\2\10\2\56\1\5"+
    "\101\0\1\57\1\60\100\0\1\5\71\0\3\5\4\0"+
    "\1\61\100\0\1\7\13\0\1\62\50\0\1\7\12\0"+
    "\2\10\22\0\44\10\10\0\1\63\64\0\1\63\20\0"+
    "\1\64\77\0\1\65\77\0\1\66\77\0\1\67\102\0"+
    "\1\70\104\0\1\71\101\0\1\72\101\0\1\73\50\0"+
    "\3\74\1\0\72\74\1\0\1\74\5\0\2\10\22\0"+
    "\1\10\1\75\26\10\1\76\13\10\10\0\2\10\22\0"+
    "\3\10\1\77\40\10\10\0\2\10\22\0\12\10\1\100"+
    "\16\10\1\101\12\10\10\0\2\10\22\0\5\10\1\102"+
    "\36\10\10\0\2\10\22\0\11\10\1\103\7\10\1\104"+
    "\22\10\10\0\2\10\22\0\1\105\43\10\10\0\2\10"+
    "\22\0\15\10\1\106\26\10\10\0\2\10\22\0\3\10"+
    "\1\107\40\10\10\0\2\10\22\0\21\10\1\110\22\10"+
    "\10\0\2\10\22\0\10\10\1\111\13\10\1\112\5\10"+
    "\1\113\11\10\10\0\2\10\22\0\21\10\1\114\22\10"+
    "\10\0\2\10\22\0\2\10\1\115\1\116\40\10\10\0"+
    "\2\10\22\0\1\10\1\117\17\10\1\120\22\10\10\0"+
    "\2\10\22\0\12\10\1\121\31\10\10\0\2\10\22\0"+
    "\11\10\1\122\32\10\10\0\2\10\22\0\1\10\1\123"+
    "\42\10\10\0\2\10\22\0\30\10\1\124\13\10\10\0"+
    "\2\10\22\0\3\10\1\125\40\10\10\0\1\7\13\0"+
    "\1\62\40\0\1\126\7\0\1\7\1\126\4\0\3\57"+
    "\1\127\72\57\1\127\1\57\2\130\1\131\75\130\5\0"+
    "\1\62\26\0\1\132\3\0\1\132\31\0\1\62\12\0"+
    "\1\63\13\0\1\62\50\0\1\63\5\0\3\74\1\0"+
    "\24\74\1\133\45\74\1\0\1\74\5\0\2\10\22\0"+
    "\2\10\1\134\41\10\10\0\2\10\22\0\22\10\1\135"+
    "\21\10\10\0\2\10\22\0\1\136\10\10\1\137\32\10"+
    "\10\0\2\10\22\0\13\10\1\140\30\10\10\0\2\10"+
    "\22\0\1\141\43\10\10\0\2\10\22\0\6\10\1\142"+
    "\35\10\10\0\2\10\22\0\12\10\1\143\31\10\10\0"+
    "\2\10\22\0\1\10\1\144\42\10\10\0\2\10\22\0"+
    "\1\10\1\145\42\10\10\0\2\10\22\0\16\10\1\146"+
    "\25\10\10\0\2\10\22\0\1\147\43\10\10\0\2\10"+
    "\22\0\22\10\1\150\21\10\10\0\2\10\22\0\1\151"+
    "\43\10\10\0\2\10\22\0\33\10\1\152\10\10\10\0"+
    "\2\10\22\0\2\10\1\153\41\10\10\0\2\10\22\0"+
    "\12\10\1\154\31\10\10\0\2\10\22\0\34\10\1\155"+
    "\7\10\10\0\2\10\22\0\3\10\1\156\40\10\10\0"+
    "\2\10\22\0\21\10\1\157\22\10\10\0\2\10\22\0"+
    "\11\10\1\160\32\10\10\0\2\10\22\0\12\10\1\161"+
    "\31\10\10\0\2\10\22\0\22\10\1\162\21\10\10\0"+
    "\2\10\22\0\22\10\1\163\21\10\10\0\2\10\22\0"+
    "\1\164\43\10\10\0\1\165\26\0\1\165\3\0\3\165"+
    "\2\0\2\165\5\0\1\165\1\0\1\165\1\0\1\165"+
    "\10\0\2\165\1\0\1\165\3\0\2\130\1\166\75\130"+
    "\1\0\1\167\1\131\102\0\1\170\1\0\2\171\61\0"+
    "\1\170\12\0\2\10\22\0\3\10\1\172\40\10\10\0"+
    "\2\10\22\0\13\10\1\173\30\10\10\0\2\10\22\0"+
    "\2\10\1\174\41\10\10\0\2\10\22\0\23\10\1\175"+
    "\20\10\10\0\2\10\22\0\3\10\1\176\40\10\10\0"+
    "\2\10\22\0\3\10\1\177\40\10\10\0\2\10\22\0"+
    "\7\10\1\172\34\10\10\0\2\10\22\0\13\10\1\200"+
    "\30\10\10\0\2\10\22\0\22\10\1\201\21\10\10\0"+
    "\2\10\22\0\17\10\1\202\24\10\10\0\2\10\22\0"+
    "\40\10\1\203\3\10\10\0\2\10\22\0\23\10\1\204"+
    "\20\10\10\0\2\10\22\0\3\10\1\205\40\10\10\0"+
    "\2\10\22\0\12\10\1\206\31\10\10\0\2\10\22\0"+
    "\25\10\1\207\16\10\10\0\2\10\22\0\12\10\1\210"+
    "\31\10\10\0\2\10\22\0\11\10\1\211\32\10\10\0"+
    "\2\10\22\0\11\10\1\212\32\10\10\0\2\10\22\0"+
    "\12\10\1\213\31\10\10\0\2\10\22\0\13\10\1\214"+
    "\30\10\10\0\2\10\22\0\12\10\1\215\31\10\10\0"+
    "\2\10\22\0\24\10\1\216\17\10\10\0\2\10\22\0"+
    "\12\10\1\217\31\10\10\0\2\10\22\0\40\10\1\220"+
    "\3\10\3\0\1\221\1\167\1\166\75\221\5\0\1\170"+
    "\64\0\1\170\12\0\2\10\22\0\1\10\1\222\42\10"+
    "\10\0\2\10\22\0\12\10\1\223\7\10\1\224\21\10"+
    "\10\0\2\10\22\0\24\10\1\225\17\10\10\0\2\10"+
    "\22\0\3\10\1\226\40\10\10\0\2\10\22\0\24\10"+
    "\1\227\17\10\10\0\2\10\22\0\7\10\1\226\34\10"+
    "\10\0\2\10\22\0\36\10\1\230\5\10\10\0\2\10"+
    "\22\0\1\10\1\231\42\10\10\0\2\10\22\0\3\10"+
    "\1\232\40\10\10\0\2\10\22\0\12\10\1\233\31\10"+
    "\10\0\2\10\22\0\1\10\1\234\42\10\10\0\2\10"+
    "\22\0\35\10\1\235\6\10\10\0\2\10\22\0\13\10"+
    "\1\236\30\10\10\0\2\10\22\0\21\10\1\237\22\10"+
    "\10\0\2\10\22\0\1\240\43\10\10\0\2\10\22\0"+
    "\3\10\1\241\40\10\10\0\2\10\22\0\36\10\1\242"+
    "\5\10\3\0\2\221\1\166\75\221\5\0\2\10\22\0"+
    "\24\10\1\243\17\10\10\0\2\10\22\0\22\10\1\244"+
    "\21\10\10\0\2\10\22\0\24\10\1\245\17\10\10\0"+
    "\2\10\22\0\23\10\1\246\20\10\10\0\2\10\22\0"+
    "\26\10\1\247\15\10\10\0\2\10\22\0\1\250\43\10"+
    "\10\0\2\10\22\0\10\10\1\251\33\10\10\0\2\10"+
    "\22\0\32\10\1\252\11\10\10\0\2\10\22\0\3\10"+
    "\1\253\40\10\10\0\2\10\22\0\1\10\1\254\42\10"+
    "\10\0\2\10\22\0\27\10\1\255\14\10\10\0\2\10"+
    "\22\0\1\256\43\10\10\0\2\10\22\0\24\10\1\257"+
    "\17\10\10\0\2\10\22\0\1\260\43\10\10\0\2\10"+
    "\22\0\13\10\1\261\30\10\10\0\2\10\22\0\3\10"+
    "\1\262\40\10\10\0\2\10\22\0\11\10\1\263\32\10"+
    "\10\0\2\10\22\0\3\10\1\264\40\10\10\0\2\10"+
    "\22\0\11\10\1\265\32\10\10\0\2\10\22\0\3\10"+
    "\1\266\40\10\10\0\2\10\22\0\3\10\1\267\40\10"+
    "\10\0\2\10\22\0\3\10\1\270\40\10\10\0\2\10"+
    "\22\0\27\10\1\271\14\10\10\0\2\10\22\0\24\10"+
    "\1\272\17\10\10\0\2\10\22\0\36\10\1\273\5\10"+
    "\10\0\2\10\22\0\26\10\1\274\15\10\10\0\2\10"+
    "\22\0\3\10\1\275\40\10\10\0\2\10\22\0\1\276"+
    "\43\10\10\0\2\10\22\0\3\10\1\277\40\10\10\0"+
    "\2\10\22\0\13\10\1\300\30\10\10\0\2\10\22\0"+
    "\1\10\1\301\42\10\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\5\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\26\1\1\0"+
    "\1\11\1\1\1\0\10\11\1\0\31\1\1\0\1\11"+
    "\1\1\2\0\33\1\1\0\1\11\1\1\1\0\27\1"+
    "\1\0\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int length;

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength(); 
                                                                    System.out.print("Lexical error: invalid token ");
            }
          case 66: break;
          case 2: 
            { return symbol(sym.DIV, new String(yytext()));
            }
          case 67: break;
          case 3: 
            { return symbol(sym.MULT, new String(yytext()));
            }
          case 68: break;
          case 4: 
            { /*se ignoran los espacios y tabuladores*/
            }
          case 69: break;
          case 5: 
            { //return "INTEGER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    return symbol(sym.INTEGER, new Integer(yytext()));
            }
          case 70: break;
          case 6: 
            { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        //return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                        return symbol(sym.IDENT, new String(aux));
                                                                    }
                                                                    else 
                                                                    {
                                                                        //return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                        return symbol(sym.IDENT, new String("IDENTIFIER: " + yytext()));
                                                                    }
            }
          case 71: break;
          case 7: 
            { return symbol(sym.SUMA, new String(yytext()));
            }
          case 72: break;
          case 8: 
            { return symbol(sym.RESTA, new String(yytext()));
            }
          case 73: break;
          case 9: 
            { return symbol(sym.MOD, new String(yytext()));
            }
          case 74: break;
          case 10: 
            { return symbol(sym.MENOR, new String(yytext()));
            }
          case 75: break;
          case 11: 
            { return symbol(sym.ASIGNAR, new String(yytext()));
            }
          case 76: break;
          case 12: 
            { return symbol(sym.MAYOR, new String(yytext()));
            }
          case 77: break;
          case 13: 
            { return symbol(sym.NOT, new String(yytext()));
            }
          case 78: break;
          case 14: 
            { return symbol(sym.SEMI_COLON, new String(yytext()));
            }
          case 79: break;
          case 15: 
            { return symbol(sym.COMA, new String(yytext()));
            }
          case 80: break;
          case 16: 
            { return symbol(sym.PUNTO, new String(yytext()));
            }
          case 81: break;
          case 17: 
            { return symbol(sym.COR_IZQ, new String(yytext()));
            }
          case 82: break;
          case 18: 
            { return symbol(sym.COR_DER, new String(yytext()));
            }
          case 83: break;
          case 19: 
            { return symbol(sym.PAR_IZQ, new String(yytext()));
            }
          case 84: break;
          case 20: 
            { return symbol(sym.PAR_DER, new String(yytext()));
            }
          case 85: break;
          case 21: 
            { return symbol(sym.LLAVE_IZQ, new String(yytext()));
            }
          case 86: break;
          case 22: 
            { return symbol(sym.LLAVE_DER, new String(yytext()));
            }
          case 87: break;
          case 23: 
            { /*lleva la cuenta de lineas*/
            }
          case 88: break;
          case 24: 
            { /*se ignoran los comentarios de linea*/
            }
          case 89: break;
          case 25: 
            { return symbol(sym.OR, new String(yytext()));
            }
          case 90: break;
          case 26: 
            { //return "DOUBLE: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                                            return symbol(sym.DOUBLE, new String("DOUBLE: " + yytext()));
            }
          case 91: break;
          case 27: 
            { return symbol(sym.MENOR_IGUAL, new String(yytext()));
            }
          case 92: break;
          case 28: 
            { return symbol(sym.IGUAL, new String(yytext()));
            }
          case 93: break;
          case 29: 
            { return symbol(sym.MAYOR_IGUAL, new String(yytext()));
            }
          case 94: break;
          case 30: 
            { return symbol(sym.DIFERENTE, new String(yytext()));
            }
          case 95: break;
          case 31: 
            { return symbol(sym.AND, new String(yytext()));
            }
          case 96: break;
          case 32: 
            { return symbol(sym.CORCHETES, new String(yytext()));
            }
          case 97: break;
          case 33: 
            { return symbol(sym.PARENTESIS, new String(yytext()));
            }
          case 98: break;
          case 34: 
            { return symbol(sym.LLAVES, new String(yytext()));
            }
          case 99: break;
          case 35: 
            { return symbol(sym.IF, new String(yytext()));
            }
          case 100: break;
          case 36: 
            { //return "Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    System.out.print("Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1));
            }
          case 101: break;
          case 37: 
            { /*return "STRING: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/
                                                                        return symbol(sym.STRING, new String(yytext()));
            }
          case 102: break;
          case 38: 
            { return symbol(sym.FOR, new String(yytext()));
            }
          case 103: break;
          case 39: 
            { return symbol(sym.INT, new String(yytext()));
            }
          case 104: break;
          case 40: 
            { return symbol(sym.NEW, new String(yytext()));
            }
          case 105: break;
          case 41: 
            { //return "INTEGER HEXADECIMAL: " + yytext() + " in line: " + yyline + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                return symbol(sym.HEXADECIMAL, new String(yytext()));
            }
          case 106: break;
          case 42: 
            { /*se ignoran los comentarios de bloque*/
            }
          case 107: break;
          case 43: 
            { /*return "BOOLEAN: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/ 
                                                                        return symbol(sym.TRUE, new String(yytext()));
            }
          case 108: break;
          case 44: 
            { return symbol(sym.THIS, new String(yytext()));
            }
          case 109: break;
          case 45: 
            { return symbol(sym.ELSE, new String(yytext()));
            }
          case 110: break;
          case 46: 
            { return symbol(sym.VOID, new String(yytext()));
            }
          case 111: break;
          case 47: 
            { return symbol(sym.NULL, new String(yytext()));
            }
          case 112: break;
          case 48: 
            { return symbol(sym.BOOL, new String(yytext()));
            }
          case 113: break;
          case 49: 
            { /*return "BOOLEAN: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);*/ 
                                                                        return symbol(sym.FALSE, new String(yytext()));
            }
          case 114: break;
          case 50: 
            { return symbol(sym.BREAK, new String(yytext()));
            }
          case 115: break;
          case 51: 
            { return symbol(sym.CLASS, new String(yytext()));
            }
          case 116: break;
          case 52: 
            { return symbol(sym.PRINT, new String(yytext()));
            }
          case 117: break;
          case 53: 
            { return symbol(sym.WHILE, new String(yytext()));
            }
          case 118: break;
          case 54: 
            { return symbol(sym.RETURN, new String(yytext()));
            }
          case 119: break;
          case 55: 
            { return symbol(sym.STRING, new String(yytext()));
            }
          case 120: break;
          case 56: 
            { return symbol(sym.DOUBLE, new String(yytext()));
            }
          case 121: break;
          case 57: 
            { return symbol(sym.MALLOC, new String(yytext()));
            }
          case 122: break;
          case 58: 
            { return symbol(sym.EXTENDS, new String(yytext()));
            }
          case 123: break;
          case 59: 
            { return symbol(sym.SETBYTE, new String(yytext()));
            }
          case 124: break;
          case 60: 
            { return symbol(sym.GETBYTE, new String(yytext()));
            }
          case 125: break;
          case 61: 
            { return symbol(sym.READLINE, new String(yytext()));
            }
          case 126: break;
          case 62: 
            { return symbol(sym.NEWARRAY, new String(yytext()));
            }
          case 127: break;
          case 63: 
            { return symbol(sym.INTERFACE, new String(yytext()));
            }
          case 128: break;
          case 64: 
            { return symbol(sym.IMPLEMENTS, new String(yytext()));
            }
          case 129: break;
          case 65: 
            { return symbol(sym.READINTEGER, new String(yytext()));
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
