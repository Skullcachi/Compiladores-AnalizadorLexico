/* The following code was generated by JFlex 1.6.1 */

package Lexic;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>O:/NetBeansProjects/MiniC#/src/Lexic/Yylex.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\70\1\71\1\71\1\71\22\0\1\64\1\44\1\61"+
    "\2\0\1\43\1\46\1\0\1\53\1\54\1\43\1\41\1\43\1\42"+
    "\1\50\1\43\1\65\11\57\1\0\1\43\1\44\1\45\1\44\2\0"+
    "\1\30\3\66\1\35\1\36\5\60\1\37\1\60\1\27\3\60\1\33"+
    "\1\40\1\32\1\34\2\60\1\67\2\60\1\51\1\0\1\52\1\0"+
    "\1\60\1\0\1\17\1\10\1\16\1\4\1\12\1\20\1\15\1\21"+
    "\1\3\1\60\1\26\1\11\1\23\1\5\1\2\1\24\1\60\1\14"+
    "\1\13\1\6\1\7\1\1\1\25\1\22\1\31\1\60\1\55\1\47"+
    "\1\56\7\0\1\71\32\0\1\71\11\0\1\62\12\0\1\62\4\0"+
    "\1\62\5\0\27\62\1\0\37\62\1\0\u01ca\62\4\0\14\62\16\0"+
    "\5\62\7\0\1\62\1\0\1\62\21\0\165\62\1\0\2\62\2\0"+
    "\4\62\1\0\1\62\6\0\1\62\1\0\3\62\1\0\1\62\1\0"+
    "\24\62\1\0\123\62\1\0\213\62\1\0\255\62\1\0\46\62\2\0"+
    "\1\62\7\0\47\62\11\0\55\62\1\0\1\62\1\0\2\62\1\0"+
    "\2\62\1\0\1\62\10\0\33\62\5\0\3\62\35\0\13\62\5\0"+
    "\112\62\4\0\146\62\1\0\10\62\2\0\12\62\1\0\23\62\2\0"+
    "\1\62\20\0\73\62\2\0\145\62\16\0\66\62\4\0\1\62\5\0"+
    "\56\62\22\0\34\62\104\0\23\62\61\0\200\62\2\0\12\62\1\0"+
    "\23\62\1\0\10\62\2\0\2\62\2\0\26\62\1\0\7\62\1\0"+
    "\1\62\3\0\4\62\2\0\11\62\2\0\2\62\2\0\4\62\10\0"+
    "\1\62\4\0\2\62\1\0\5\62\2\0\14\62\17\0\3\62\1\0"+
    "\6\62\4\0\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0"+
    "\2\62\1\0\2\62\2\0\1\62\1\0\5\62\4\0\2\62\2\0"+
    "\3\62\3\0\1\62\7\0\4\62\1\0\1\62\7\0\20\62\13\0"+
    "\3\62\1\0\11\62\1\0\3\62\1\0\26\62\1\0\7\62\1\0"+
    "\2\62\1\0\5\62\2\0\12\62\1\0\3\62\1\0\3\62\2\0"+
    "\1\62\17\0\4\62\2\0\12\62\21\0\3\62\1\0\10\62\2\0"+
    "\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0\5\62\2\0"+
    "\11\62\2\0\2\62\2\0\3\62\10\0\2\62\4\0\2\62\1\0"+
    "\5\62\2\0\12\62\1\0\1\62\20\0\2\62\1\0\6\62\3\0"+
    "\3\62\1\0\4\62\3\0\2\62\1\0\1\62\1\0\2\62\3\0"+
    "\2\62\3\0\3\62\3\0\14\62\4\0\5\62\3\0\3\62\1\0"+
    "\4\62\2\0\1\62\6\0\1\62\16\0\12\62\20\0\4\62\1\0"+
    "\10\62\1\0\3\62\1\0\27\62\1\0\20\62\3\0\10\62\1\0"+
    "\3\62\1\0\4\62\7\0\2\62\1\0\2\62\6\0\4\62\2\0"+
    "\12\62\21\0\3\62\1\0\10\62\1\0\3\62\1\0\27\62\1\0"+
    "\12\62\1\0\5\62\2\0\11\62\1\0\3\62\1\0\4\62\7\0"+
    "\2\62\7\0\1\62\1\0\4\62\2\0\12\62\1\0\2\62\16\0"+
    "\3\62\1\0\10\62\1\0\3\62\1\0\51\62\2\0\10\62\1\0"+
    "\3\62\1\0\5\62\10\0\1\62\10\0\4\62\2\0\12\62\12\0"+
    "\6\62\2\0\2\62\1\0\22\62\3\0\30\62\1\0\11\62\1\0"+
    "\1\62\2\0\7\62\3\0\1\62\4\0\6\62\1\0\1\62\1\0"+
    "\10\62\6\0\12\62\2\0\2\62\15\0\72\62\5\0\17\62\1\0"+
    "\12\62\47\0\2\62\1\0\1\62\2\0\2\62\1\0\1\62\2\0"+
    "\1\62\6\0\4\62\1\0\7\62\1\0\3\62\1\0\1\62\1\0"+
    "\1\62\2\0\2\62\1\0\15\62\1\0\3\62\2\0\5\62\1\0"+
    "\1\62\1\0\6\62\2\0\12\62\2\0\4\62\40\0\1\62\27\0"+
    "\2\62\6\0\12\62\13\0\1\62\1\0\1\62\1\0\1\62\4\0"+
    "\12\62\1\0\44\62\4\0\24\62\1\0\22\62\1\0\44\62\11\0"+
    "\1\62\71\0\112\62\6\0\116\62\2\0\46\62\1\0\1\62\5\0"+
    "\1\62\2\0\53\62\1\0\u014d\62\1\0\4\62\2\0\7\62\1\0"+
    "\1\62\1\0\4\62\2\0\51\62\1\0\4\62\2\0\41\62\1\0"+
    "\4\62\2\0\7\62\1\0\1\62\1\0\4\62\2\0\17\62\1\0"+
    "\71\62\1\0\4\62\2\0\103\62\2\0\3\62\40\0\20\62\20\0"+
    "\125\62\14\0\u026c\62\2\0\21\62\1\71\32\62\5\0\113\62\3\0"+
    "\13\62\7\0\15\62\1\0\7\62\13\0\25\62\13\0\24\62\14\0"+
    "\15\62\1\0\3\62\1\0\2\62\14\0\124\62\3\0\1\62\4\0"+
    "\2\62\2\0\12\62\41\0\3\62\2\0\12\62\6\0\130\62\10\0"+
    "\53\62\5\0\106\62\12\0\37\62\1\0\14\62\4\0\14\62\12\0"+
    "\50\62\2\0\5\62\13\0\54\62\4\0\32\62\6\0\12\62\46\0"+
    "\34\62\4\0\77\62\1\0\35\62\2\0\13\62\6\0\12\62\15\0"+
    "\1\62\10\0\17\62\101\0\114\62\4\0\12\62\21\0\11\62\14\0"+
    "\164\62\14\0\70\62\10\0\12\62\3\0\61\62\122\0\3\62\1\0"+
    "\43\62\1\0\2\62\6\0\366\62\6\0\u011a\62\2\0\6\62\2\0"+
    "\46\62\2\0\6\62\2\0\10\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\37\62\2\0\65\62\1\0\7\62\1\0\1\62\3\0"+
    "\3\62\1\0\7\62\3\0\4\62\2\0\6\62\4\0\15\62\5\0"+
    "\3\62\1\0\7\62\3\0\13\71\35\0\1\71\1\71\5\0\1\71"+
    "\17\0\2\62\23\0\1\62\12\0\1\71\21\0\1\62\15\0\1\62"+
    "\20\0\15\62\63\0\41\62\21\0\1\62\4\0\1\62\2\0\12\62"+
    "\1\0\1\62\3\0\5\62\6\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\4\62\1\0\13\62\2\0\4\62\5\0\5\62\4\0\1\62"+
    "\21\0\51\62\u032d\0\64\62\u0716\0\57\62\1\0\57\62\1\0\205\62"+
    "\6\0\11\62\14\0\46\62\1\0\1\62\5\0\1\62\2\0\70\62"+
    "\7\0\1\62\17\0\30\62\11\0\7\62\1\0\7\62\1\0\7\62"+
    "\1\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62"+
    "\1\0\40\62\57\0\1\62\u01d0\0\1\71\4\0\3\62\31\0\17\62"+
    "\1\0\5\62\2\0\5\62\4\0\126\62\2\0\2\62\2\0\3\62"+
    "\1\0\132\62\1\0\4\62\5\0\51\62\3\0\136\62\21\0\33\62"+
    "\65\0\20\62\u0200\0\u19b6\62\112\0\u51cd\62\63\0\u048d\62\103\0\56\62"+
    "\2\0\u010d\62\3\0\34\62\24\0\63\62\1\0\12\62\1\0\37\62"+
    "\1\0\123\62\45\0\11\62\2\0\147\62\2\0\4\62\1\0\36\62"+
    "\2\0\2\62\105\0\61\62\30\0\64\62\14\0\105\62\13\0\12\62"+
    "\6\0\30\62\3\0\1\62\4\0\56\62\2\0\44\62\14\0\35\62"+
    "\3\0\101\62\16\0\13\62\6\0\37\62\1\0\67\62\11\0\16\62"+
    "\2\0\12\62\6\0\27\62\3\0\111\62\30\0\3\62\2\0\20\62"+
    "\2\0\5\62\12\0\6\62\2\0\6\62\2\0\6\62\11\0\7\62"+
    "\1\0\7\62\1\0\53\62\1\0\4\62\4\0\2\62\132\0\53\62"+
    "\1\0\2\62\2\0\12\62\6\0\u2ba4\62\14\0\27\62\4\0\61\62"+
    "\u2104\0\u016e\62\2\0\152\62\46\0\7\62\14\0\5\62\5\0\14\62"+
    "\1\0\15\62\1\0\5\62\1\0\1\62\1\0\2\62\1\0\2\62"+
    "\1\0\154\62\41\0\u016b\62\22\0\100\62\2\0\66\62\50\0\14\62"+
    "\4\0\20\62\20\0\16\62\5\0\2\62\30\0\3\62\40\0\5\62"+
    "\1\0\207\62\23\0\12\62\7\0\32\62\4\0\1\62\1\0\32\62"+
    "\13\0\131\62\3\0\6\62\2\0\6\62\2\0\6\62\2\0\3\62"+
    "\43\0\14\62\1\0\32\62\1\0\23\62\1\0\2\62\1\0\17\62"+
    "\2\0\16\62\42\0\173\62\105\0\65\62\210\0\1\62\202\0\35\62"+
    "\3\0\61\62\17\0\1\62\37\0\40\62\20\0\33\62\5\0\53\62"+
    "\5\0\36\62\2\0\44\62\4\0\10\62\1\0\5\62\52\0\236\62"+
    "\2\0\12\62\126\0\50\62\10\0\64\62\234\0\u0137\62\11\0\26\62"+
    "\12\0\10\62\230\0\6\62\2\0\1\62\1\0\54\62\1\0\2\62"+
    "\3\0\1\62\2\0\27\62\12\0\27\62\11\0\37\62\141\0\26\62"+
    "\12\0\32\62\106\0\70\62\6\0\2\62\100\0\4\62\1\0\2\62"+
    "\5\0\10\62\1\0\3\62\1\0\33\62\4\0\3\62\4\0\1\62"+
    "\40\0\35\62\3\0\35\62\43\0\10\62\1\0\36\62\31\0\66\62"+
    "\12\0\26\62\12\0\23\62\15\0\22\62\156\0\111\62\u03b7\0\107\62"+
    "\37\0\12\62\17\0\74\62\25\0\31\62\7\0\12\62\6\0\65\62"+
    "\1\0\12\62\20\0\44\62\2\0\1\62\11\0\105\62\13\0\13\62"+
    "\45\0\22\62\1\0\45\62\170\0\73\62\5\0\12\62\7\0\3\62"+
    "\1\0\10\62\2\0\2\62\2\0\26\62\1\0\7\62\1\0\2\62"+
    "\1\0\5\62\2\0\11\62\2\0\2\62\2\0\3\62\11\0\1\62"+
    "\5\0\7\62\2\0\7\62\3\0\5\62\u010b\0\106\62\1\0\1\62"+
    "\10\0\12\62\246\0\66\62\2\0\11\62\77\0\101\62\3\0\1\62"+
    "\13\0\12\62\46\0\70\62\10\0\12\62\u01d6\0\112\62\25\0\1\62"+
    "\u01c0\0\71\62\u0507\0\u0399\62\147\0\157\62\u0b91\0\u042f\62\u33d1\0\u0239\62"+
    "\7\0\37\62\1\0\12\62\146\0\36\62\2\0\5\62\13\0\67\62"+
    "\11\0\4\62\14\0\12\62\11\0\25\62\5\0\23\62\u0370\0\105\62"+
    "\13\0\57\62\20\0\21\62\u4060\0\2\62\u0bfe\0\153\62\5\0\15\62"+
    "\3\0\11\62\7\0\12\62\3\0\2\62\u14c6\0\5\62\3\0\6\62"+
    "\10\0\10\62\2\0\7\62\36\0\4\62\224\0\3\62\u01bb\0\125\62"+
    "\1\0\107\62\1\0\2\62\2\0\1\62\2\0\2\62\2\0\4\62"+
    "\1\0\14\62\1\0\1\62\1\0\7\62\1\0\101\62\1\0\4\62"+
    "\2\0\10\62\1\0\7\62\1\0\34\62\1\0\4\62\1\0\5\62"+
    "\1\0\1\62\3\0\7\62\1\0\u0154\62\2\0\31\62\1\0\31\62"+
    "\1\0\37\62\1\0\31\62\1\0\37\62\1\0\31\62\1\0\37\62"+
    "\1\0\31\62\1\0\37\62\1\0\31\62\1\0\10\62\2\0\62\62"+
    "\u1000\0\305\62\13\0\7\62\u0529\0\4\62\1\0\33\62\1\0\2\62"+
    "\1\0\1\62\2\0\1\62\1\0\12\62\1\0\4\62\1\0\1\62"+
    "\1\0\1\62\6\0\1\62\4\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\2\62\1\0\1\62\2\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\2\62\1\0\1\62"+
    "\2\0\4\62\1\0\7\62\1\0\4\62\1\0\4\62\1\0\1\62"+
    "\1\0\12\62\1\0\21\62\5\0\3\62\1\0\5\62\1\0\21\62"+
    "\u0274\0\32\62\6\0\32\62\6\0\32\62\u0e76\0\ua6d7\62\51\0\u1035\62"+
    "\13\0\336\62\u3fe2\0\u021e\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\62\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\2\3\3\2\1\3\3\1\4\1\1"+
    "\1\5\1\6\1\4\2\2\1\7\22\2\5\0\1\2"+
    "\1\7\15\2\1\7\2\2\1\0\1\10\1\11\3\12"+
    "\2\2\1\13\5\2\1\0\6\2\1\10\7\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\72\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\256\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u0b54\0\72\0\u108a\0\u0c02"+
    "\0\u0bc8\0\u10c4\0\u10fe\0\256\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u125a\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\4\1\12\1\13\1\14\1\4\1\15\1\4"+
    "\1\16\4\4\1\17\1\4\1\20\2\4\1\21\3\4"+
    "\1\22\2\4\2\23\1\24\2\25\1\26\1\27\1\24"+
    "\1\30\1\24\1\31\1\24\1\32\1\24\1\33\1\4"+
    "\1\34\1\2\1\35\1\36\1\37\2\4\1\36\1\35"+
    "\73\0\1\4\1\40\36\4\16\0\2\4\4\0\3\4"+
    "\3\0\40\4\16\0\2\4\4\0\3\4\3\0\4\4"+
    "\1\41\12\4\1\42\2\4\1\43\15\4\16\0\2\4"+
    "\4\0\3\4\3\0\1\4\1\44\36\4\16\0\2\4"+
    "\4\0\3\4\3\0\6\4\1\45\31\4\16\0\2\4"+
    "\4\0\3\4\3\0\13\4\1\46\4\4\1\47\17\4"+
    "\16\0\2\4\4\0\3\4\3\0\1\4\1\50\11\4"+
    "\1\51\24\4\16\0\2\4\4\0\3\4\3\0\10\4"+
    "\1\52\10\4\1\53\16\4\16\0\2\4\4\0\3\4"+
    "\3\0\5\4\1\54\32\4\16\0\2\4\4\0\3\4"+
    "\3\0\11\4\1\55\26\4\16\0\2\4\4\0\3\4"+
    "\3\0\10\4\1\56\27\4\16\0\2\4\4\0\3\4"+
    "\3\0\1\4\1\57\14\4\1\60\21\4\16\0\2\4"+
    "\4\0\3\4\3\0\20\4\1\61\17\4\16\0\2\4"+
    "\4\0\3\4\3\0\11\4\1\62\26\4\16\0\2\4"+
    "\4\0\3\4\3\0\32\4\1\63\5\4\16\0\2\4"+
    "\4\0\3\4\3\0\27\4\1\64\10\4\16\0\2\4"+
    "\4\0\3\4\61\0\1\65\5\0\1\65\51\0\1\24"+
    "\72\0\1\24\72\0\1\24\74\0\1\24\73\0\1\24"+
    "\73\0\1\24\63\0\1\66\6\0\1\33\5\0\1\33"+
    "\4\0\61\67\1\0\10\67\63\0\2\35\3\0\2\35"+
    "\22\0\1\70\25\0\1\66\6\0\1\33\5\0\1\33"+
    "\1\0\1\71\3\0\2\4\1\72\35\4\16\0\2\4"+
    "\4\0\3\4\3\0\5\4\1\73\32\4\16\0\2\4"+
    "\4\0\3\4\3\0\23\4\1\74\14\4\16\0\2\4"+
    "\4\0\3\4\3\0\6\4\1\75\31\4\16\0\2\4"+
    "\4\0\3\4\3\0\10\4\1\76\27\4\16\0\2\4"+
    "\4\0\3\4\3\0\6\4\1\77\31\4\16\0\2\4"+
    "\4\0\3\4\3\0\2\4\1\100\35\4\16\0\2\4"+
    "\4\0\3\4\3\0\1\4\1\76\36\4\16\0\2\4"+
    "\4\0\3\4\3\0\11\4\1\101\26\4\16\0\2\4"+
    "\4\0\3\4\3\0\12\4\1\102\25\4\16\0\2\4"+
    "\4\0\3\4\3\0\5\4\1\103\32\4\16\0\2\4"+
    "\4\0\3\4\3\0\13\4\1\104\24\4\16\0\2\4"+
    "\4\0\3\4\3\0\5\4\1\105\32\4\16\0\2\4"+
    "\4\0\3\4\3\0\16\4\1\106\21\4\16\0\2\4"+
    "\4\0\3\4\3\0\13\4\1\42\24\4\16\0\2\4"+
    "\4\0\3\4\3\0\10\4\1\107\27\4\16\0\2\4"+
    "\4\0\3\4\3\0\2\4\1\110\35\4\16\0\2\4"+
    "\4\0\3\4\3\0\24\4\1\111\13\4\16\0\2\4"+
    "\4\0\3\4\3\0\33\4\1\112\4\4\16\0\2\4"+
    "\4\0\3\4\3\0\36\4\1\113\1\4\16\0\2\4"+
    "\4\0\3\4\52\0\1\66\6\0\1\65\5\0\1\65"+
    "\16\0\1\114\22\0\1\114\21\0\1\115\5\0\1\115"+
    "\5\0\40\67\16\0\2\67\1\116\6\67\6\0\1\117"+
    "\3\0\1\117\1\0\1\117\3\0\3\117\7\0\1\120"+
    "\4\0\2\120\20\0\1\121\5\0\1\121\1\120\33\0"+
    "\1\120\4\0\2\120\20\0\1\120\5\0\2\120\4\0"+
    "\3\4\1\42\34\4\16\0\2\4\4\0\3\4\3\0"+
    "\11\4\1\122\26\4\16\0\2\4\4\0\3\4\3\0"+
    "\10\4\1\123\27\4\16\0\2\4\4\0\3\4\3\0"+
    "\7\4\1\110\30\4\16\0\2\4\4\0\3\4\3\0"+
    "\10\4\1\42\27\4\16\0\2\4\4\0\3\4\3\0"+
    "\11\4\1\124\26\4\16\0\2\4\4\0\3\4\3\0"+
    "\12\4\1\42\25\4\16\0\2\4\4\0\3\4\3\0"+
    "\16\4\1\125\21\4\16\0\2\4\4\0\3\4\3\0"+
    "\11\4\1\42\26\4\16\0\2\4\4\0\3\4\3\0"+
    "\11\4\1\126\26\4\16\0\2\4\4\0\3\4\3\0"+
    "\2\4\1\127\35\4\16\0\2\4\4\0\3\4\3\0"+
    "\6\4\1\130\31\4\16\0\2\4\4\0\3\4\3\0"+
    "\12\4\1\100\25\4\16\0\2\4\4\0\3\4\3\0"+
    "\12\4\1\77\25\4\16\0\2\4\4\0\3\4\3\0"+
    "\10\4\1\102\27\4\16\0\2\4\4\0\3\4\3\0"+
    "\27\4\1\131\10\4\16\0\2\4\4\0\3\4\3\0"+
    "\34\4\1\124\3\4\16\0\2\4\4\0\3\4\3\0"+
    "\37\4\1\112\16\0\2\4\4\0\3\4\43\0\1\132"+
    "\34\0\1\117\3\0\1\117\1\0\1\117\3\0\3\117"+
    "\36\0\1\117\5\0\1\117\5\0\13\4\1\133\24\4"+
    "\16\0\2\4\4\0\3\4\3\0\11\4\1\134\26\4"+
    "\16\0\2\4\4\0\3\4\3\0\25\4\1\42\12\4"+
    "\16\0\2\4\4\0\3\4\3\0\4\4\1\135\33\4"+
    "\16\0\2\4\4\0\3\4\3\0\4\4\1\136\33\4"+
    "\16\0\2\4\4\0\3\4\3\0\13\4\1\137\24\4"+
    "\16\0\2\4\4\0\3\4\3\0\13\4\1\140\24\4"+
    "\16\0\2\4\4\0\3\4\61\0\1\141\5\0\1\141"+
    "\5\0\17\4\1\142\20\4\16\0\2\4\4\0\3\4"+
    "\3\0\22\4\1\143\15\4\16\0\2\4\4\0\3\4"+
    "\3\0\3\4\1\100\34\4\16\0\2\4\4\0\3\4"+
    "\3\0\14\4\1\42\23\4\16\0\2\4\4\0\3\4"+
    "\3\0\4\4\1\42\33\4\16\0\2\4\4\0\3\4"+
    "\3\0\13\4\1\144\24\4\16\0\2\4\4\0\3\4"+
    "\3\0\16\4\1\145\21\4\16\0\2\4\4\0\3\4"+
    "\3\0\11\4\1\146\26\4\16\0\2\4\4\0\3\4"+
    "\3\0\16\4\1\147\21\4\16\0\2\4\4\0\3\4"+
    "\3\0\15\4\1\102\22\4\16\0\2\4\4\0\3\4"+
    "\3\0\4\4\1\150\33\4\16\0\2\4\4\0\3\4"+
    "\3\0\30\4\1\42\7\4\16\0\2\4\4\0\3\4"+
    "\3\0\5\4\1\100\32\4\16\0\2\4\4\0\3\4"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\40\1\5\0\22\1\1\0"+
    "\1\1\1\11\13\1\1\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2720) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "Lexical error: lexema " + yytext() + " is INVALID, found in line: : " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 12: break;
          case 2: 
            { return "IDENTIFIER: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 13: break;
          case 3: 
            { return "OPERATOR OR PUNTATION MARK: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 14: break;
          case 4: 
            { return "INTEGER: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 15: break;
          case 5: 
            { /*se ignoran los espacios y tabuladores*/
            }
          case 16: break;
          case 6: 
            { /*lleva la cuenta de lineas*/
            }
          case 17: break;
          case 7: 
            { return "RESERVED WORD: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 18: break;
          case 8: 
            { return "DOUBLE: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 19: break;
          case 9: 
            { return "STRING: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 20: break;
          case 10: 
            { return "INTEGER HEXADECIMAL: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 21: break;
          case 11: 
            { return "BOOLEAN: " + yytext() + " in line: " + yyline + " columns: " + yycolumn + " - " + (yycolumn + yylength());
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
